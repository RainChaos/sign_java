<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.gljp.sign.admin.mapper.sign.DictMapper" >

   <select id="getDictionaryTypeList"  resultType="cn.gljp.sign.admin.entity.DictionaryType">
       SELECT * from base_dictionary_type
       order by sort asc,id asc
   </select>
    <select id="listForPid"  parameterType="Integer" resultType="cn.gljp.sign.admin.entity.DictionaryType">
       SELECT * from base_dictionary_type where pid = #{pid}
       order by sort asc,id asc
   </select>
    <insert id="insert" parameterType="cn.gljp.sign.admin.entity.DictionaryType">
    insert into base_dictionary_type (pid, `name`,
      `value`, sort)
    values (#{pid,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR},
      #{value,jdbcType=VARCHAR}, #{sort,jdbcType=INTEGER})
  </insert>
    <insert id="insertSelective" parameterType="cn.gljp.sign.admin.entity.DictionaryType">
        insert into base_dictionary_type
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="pid != null">
                pid,
            </if>
            <if test="name != null">
                `name`,
            </if>
            <if test="value != null">
                `value`,
            </if>
            <if test="sort != null">
                sort,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="pid != null">
                #{pid,jdbcType=INTEGER},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="value != null">
                #{value,jdbcType=VARCHAR},
            </if>
            <if test="sort != null">
                #{sort,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="update" parameterType="cn.gljp.sign.admin.entity.DictionaryType">
        update base_dictionary_type
        set
        pid = #{pid,jdbcType=INTEGER},
        `name` = #{name,jdbcType=VARCHAR},
        `value` = #{value,jdbcType=VARCHAR},
        sort = #{sort,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <delete id="delete" parameterType="cn.gljp.sign.admin.entity.DictionaryType">
        delete from base_dictionary_type
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <select id="listDictionaryByType2"  parameterType="java.util.HashMap" resultType="cn.gljp.sign.admin.entity.Dictionary">
       SELECT * from base_dictionary where `type` = #{type,jdbcType=VARCHAR}
       order by sort asc,id asc
   </select>
    <select id="listDictionaryByType"  parameterType="java.util.HashMap" resultType="cn.gljp.sign.admin.entity.Dictionary">
       SELECT * from base_dictionary where `type` = #{type,jdbcType=VARCHAR}
       order by sort asc,id asc
       limit #{pageIndex},#{pageSize}
   </select>
    <select id="listDictionaryByTypeCount"  parameterType="java.util.HashMap" resultType="Long">
       SELECT count(*) from base_dictionary where `type` = #{type,jdbcType=VARCHAR}

   </select>
    <insert id="dictionaryInsert" parameterType="cn.gljp.sign.admin.entity.Dictionary">
    insert into base_dictionary ( code, `type`,
      `name`, status, sort)
    values ( #{code,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR},
      #{name,jdbcType=VARCHAR}, #{status,jdbcType=BIT}, #{sort,jdbcType=SMALLINT})
  </insert>
    <insert id="dictionaryInsertSelective" parameterType="cn.gljp.sign.admin.entity.Dictionary">
        insert into base_dictionary
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="code != null">
                code,
            </if>
            <if test="type != null">
                `type`,
            </if>
            <if test="name != null">
                `name`,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="sort != null">
                sort,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="code != null">
                #{code,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                #{type,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=BIT},
            </if>
            <if test="sort != null">
                #{sort,jdbcType=SMALLINT},
            </if>
        </trim>
    </insert>
    <update id="dictionaryUpdate" parameterType="cn.gljp.sign.admin.entity.Dictionary">
        update base_dictionary
        set 
        code = #{code,jdbcType=VARCHAR},
        `type` = #{type,jdbcType=VARCHAR},
        `name` = #{name,jdbcType=VARCHAR},
        status = #{status,jdbcType=BIT},
        sort = #{sort,jdbcType=SMALLINT}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateStatus" parameterType="cn.gljp.sign.admin.entity.Dictionary">
        update base_dictionary
        set
        status = #{status,jdbcType=BIT}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <delete id="dictionaryDelete" parameterType="java.util.List">
        delete from base_dictionary
        where id in
        <foreach collection="list" item="item"  open="("
                 separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <select id="getFormConfigLists" parameterType="map" resultType="map">
        SELECT
            t1.*, t2.is_unique,
            t2.event_name,
            t2.data_type,
            t2.type,
            t2.dictionary_type
        FROM
            base_student_form_field t1
        LEFT JOIN base_student_field t2 ON t1.field_name = t2.field_name
        where form_name = #{form_name} and pici_id = #{pici_id}
        ORDER BY sort
    </select>


    <select id="getFormConfigListsV2" parameterType="map" resultType="map">
        SELECT
            t1.*, t2.is_unique,
            t2.event_name,
            t2.data_type,
            t2.type,
            t2.dictionary_type
        FROM
            base_student_form_field t1
        LEFT JOIN base_student_field t2 ON t1.field_name = t2.field_name
        where form_name = #{form_name}
        <if test="is_export != null">and t1.is_export = 1</if>

        ORDER BY sort
    </select>

    <select id="getDictionaryByType" parameterType="map" resultType="map">
        select name text, code value from base_dictionary where type = #{dictionary_type}
        <if test="status != null and status == '1'">
            and status = '1'
        </if>
    </select>

    <select id="getSearchField" parameterType="map" resultType="map">
        select t1.id,t1.field_name,t1.table_name,t1.sort,t2.describe,t2.where_sql,t2.default_value,t2.label_width,t2.width,t2.status,t3.type,
	t3.data_type from base_grid_search_field t1 LEFT JOIN base_student_search_field t2 on t1.field_name = t2.field_name LEFT JOIN base_student_field t3 on t2.field_name = t3.field_name
WHERE
	t1.table_name = #{form_name} and t2.status = '1' order by t1.sort
    </select>

    <select id="getDictionaryByFieldName" parameterType="map" resultType="map">
        select name text,code value from base_dictionary where type = (
        select dictionary_type from base_student_field where field_name = #{field_name})
    </select>

    <select id="getStudentEducation" resultType="map">
        select * from base_dictionary where type = 'beducation'
    </select>

    <select id="getDictById" resultType="cn.gljp.sign.admin.entity.Dictionary" parameterType="String">
        select * from base_dictionary where id = #{0}
    </select>

    <update id="setDefault" parameterType="map">
        update base_dictionary set is_default = '0' where id in (
        select id from (select id from base_dictionary where type = (select type from base_dictionary where id = #{id}))t);
        update base_dictionary set is_default = '1' where id = #{id}
    </update>
</mapper>